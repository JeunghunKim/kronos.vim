Include: setup.vader

#----------------------------------------------------------------# Create task #

Execute (Create):
  let id1 = kronos#api#task#Create(g_database, g_task1)
  let id2 = kronos#api#task#Create(g_database, g_task2)

Then (should insert tasks):
  AssertEqual 1, id1
  AssertEqual 2, id2
  AssertEqual g_tasks, kronos#api#database#ReadTasks(g_database)
  unlet id1 id2

#------------------------------------------------------------------# Read task #

Execute (Read):
  call kronos#api#task#Create(g_database, g_task1)

Then (should get a task by id):
  AssertEqual g_task1, kronos#api#task#Read(g_database, 1)

#-------------------------------------------------------------# Read all tasks #

Execute (ReadAll):
  call kronos#api#task#Create(g_database, g_task1)
  let result = kronos#api#task#ReadAll(g_database)

Then (should get all tasks):
  AssertEqual [g_task1], result
  AssertEqual kronos#api#database#ReadTasks(g_database), result
  unlet result

#----------------------------------------------------------------# Update task #

Execute (Update):
  call kronos#api#task#Create(g_database, g_task1)
  let taskupdate = {
    \ 'id': 1,
    \ 'desc': 'test kronos updated',
    \ 'tags': ['test', 'vader', 'kronos', 'update'],
    \ 'due': 1527462654
  \}

  call kronos#api#task#Update(g_database, 1, taskupdate)

Then (should update a task):
  AssertEqual [taskupdate], kronos#api#database#ReadTasks(g_database)
  unlet taskupdate

#----------------------------------------------------------------# Delete task #

Execute (Delete):
  call kronos#api#task#Create(g_database, g_task1)
  call kronos#api#task#Delete(g_database, 1)

Then (should delete a task by id):
  AssertEqual [], kronos#api#database#ReadTasks(g_database)

