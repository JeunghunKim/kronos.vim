Include: setup.vader

#----------------------------------------------------------------# Generate ID #

Execute (GenerateId):
Then (should generate correct id):
  AssertEqual 3, kronos#task#GenerateId([{'id': 1}, {'id': 2}, {'id': 4}])
  AssertEqual 1, kronos#task#GenerateId([{'id': 2}, {'id': 3}, {'id': 5}])
  AssertEqual 4, kronos#task#GenerateId([{'id': 1}, {'id': 2}, {'id': 3}])

#-------------------------------------------------------# Get task index by ID #

Execute (GetTaskIndexById):
Then (should get task by id):
  AssertEqual 0, kronos#task#GetTaskIndexById(g_tasks, 1)
  AssertThrows kronos#task#GetTaskIndexById(g_tasks, 0)

#----------------------------------------------------------------# Create task #

Execute (Create):
  let task1 = {'desc': 'task 1', 'tags': [], 'due': 0}
  let task2 = {'desc': 'task 2', 'tags': ['test'], 'due': 1}
  let id1 = kronos#task#Create(g_database, task1)
  let id2 = kronos#task#Create(g_database, task2)

Then (should insert tasks):
  AssertEqual 1, id1
  AssertEqual 2, id2
  AssertEqual [task1, task2], kronos#database#ReadTasks(g_database)
  unlet task1 task2 id1 id2

#------------------------------------------------------------------# Read task #

Execute (Read):
  call kronos#task#Create(g_database, g_task)

Then (should get a task by id):
  AssertEqual g_task, kronos#task#Read(g_database, 1)

#-------------------------------------------------------------# Read all tasks #

Execute (ReadAll):
  call kronos#task#Create(g_database, g_task)
  let result = kronos#task#ReadAll(g_database)

Then (should get all tasks):
  AssertEqual g_tasks, result
  AssertEqual kronos#database#ReadTasks(g_database), result
  unlet result

#----------------------------------------------------------------# Update task #

Execute (Update):
  call kronos#task#Create(g_database, g_task)
  let taskupdate = {
    \ 'id': 1,
    \ 'desc': 'test kronos updated',
    \ 'tags': ['test', 'vader', 'kronos', 'update'],
    \ 'due': 1527462654
  \}

Then (should update a task):
  Assert kronos#task#Update(g_database, 1, taskupdate)
  AssertEqual [taskupdate], kronos#database#ReadTasks(g_database)
  unlet taskupdate

#----------------------------------------------------------------# Delete task #

Execute (Delete):
  call kronos#task#Create(g_database, g_task)

Then (should delete a task by id):
  Assert kronos#task#Delete(g_database, 1)
  AssertEqual [], kronos#database#ReadTasks(g_database)

