Include: setup.vader

# ------------------------------------------------------------------ # To list #

Execute (To list):
  let scenarios = [
    \[
      \{
        \'hide_done': 0,
        \'enable_sync': 1,
        \'sync_host': 'localhost:5001',
        \'sync_user_id': 'user_id',
        \'sync_device_id': 'device_id',
        \'sync_version': 1,
        \'tasks': [],
      \},
      \[
        \0,
        \1,
        \'localhost:5001',
        \'user_id',
        \'device_id',
        \1,
      \],
    \],
    \[
      \{
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5000',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 0,
        \'tasks': [
          \{
            \'id': 1,
            \'desc': 'desc 1',
            \'tags': [],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
          \{
            \'id': 2,
            \'desc': 'desc 2',
            \'tags': ['tag-1', 'tag-2'],
            \'due': 0,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
        \],
      \},
      \[
        \1,
        \0,
        \'localhost:5000',
        \'',
        \'',
        \0,
        \'{''active'': 0, ''id'': 1, ''due'': 1526397300, ''desc'': ''desc 1'', ''done'': 0, ''tags'': [], ''worktime'': 0, ''last_active'': 0}',
        \'{''active'': 0, ''id'': 2, ''due'': 0, ''desc'': ''desc 2'', ''done'': 0, ''tags'': [''tag-1'', ''tag-2''], ''worktime'': 0, ''last_active'': 0}',
      \],
    \],
  \]

Then (should turn data into list):
  for [data, list] in scenarios
    AssertEqual list, kronos#database#to_list(data)
  endfor

# --------------------------------------------------------------- # Merge data #

Execute (Merge data):
  let scenarios = [
    \[
      \{},
      \{
        \'tasks': [],
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5000',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 0,
      \},
    \],
    \[
      \{
        \'tasks': [
          \{
            \'id': 1,
            \'desc': 'desc 1',
            \'tags': [],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 1526497300,
          \},
          \{
            \'id': 2,
            \'desc': 'desc 2',
            \'tags': ['tag-1', 'tag-2'],
            \'due': 0,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
        \],
        \'hide_done': 0,
        \'enable_sync': 1,
        \'sync_host': 'localhost:5001',
        \'sync_user_id': 'user_id',
        \'sync_device_id': 'device_id',
        \'sync_version': 1,
      \},
      \{
        \'tasks': [
          \{
            \'id': 2,
            \'desc': 'desc 2',
            \'tags': ['tag-1', 'tag-2'],
            \'due': 0,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
          \{
            \'id': 1,
            \'desc': 'desc 1',
            \'tags': [],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 1526497300,
          \},
        \],
        \'hide_done': 0,
        \'enable_sync': 1,
        \'sync_host': 'localhost:5001',
        \'sync_user_id': 'user_id',
        \'sync_device_id': 'device_id',
        \'sync_version': 1,
      \},
    \],
  \]

Then (should merge data part with data):
  for [data_part, data] in scenarios
    AssertEqual data, kronos#database#merge_data(g_data, data_part)
  endfor

# --------------------------------------------------------------------- # Read #

Execute (Read):
  let database_1 = resolve(g_dirname . '/.database_1')
  let database_2 = resolve(g_dirname . '/.database_2')
  let database_3 = resolve(g_dirname . '/.database_3')

  call writefile([
    \'1',
    \'0',
    \'localhost:5001',
    \'',
    \'',
    \'0',
    \'{"id": 1, "desc": "test kronos 1", "tags": ["test", "vader", "kronos"], "due": 1526397300, "active": 0, "last_active": 0, "worktime": 0, "done": 0}',
  \], database_1, 's')

  call writefile([
    \'0',
    \'1',
    \'localhost:5002',
    \'user_id',
    \'',
    \'0',
    \'{"id": 1, "desc": "test kronos 1", "tags": ["test", "vader", "kronos"], "due": 1526397300, "active": 0, "last_active": 0, "worktime": 0, "done": 0}',
    \'{"id": 2, "desc": "test kronos 2", "tags": [], "due": 0, "active": 0, "last_active": 0, "worktime": 5, "done": 0}',
  \], database_2, 's')

  let scenarios = [
    \[
      \database_1,
      \{
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5001',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 0,
        \'tasks': [
          \{
            \'id': 1,
            \'desc': 'test kronos 1',
            \'tags': ['test', 'vader', 'kronos'],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
        \],
      \},
    \],
    \[
      \database_2,
      \{
        \'hide_done': 0,
        \'enable_sync': 1,
        \'sync_host': 'localhost:5002',
        \'sync_user_id': 'user_id',
        \'sync_device_id': '',
        \'sync_version': 0,
        \'tasks': [
          \{
            \'id': 1,
            \'desc': 'test kronos 1',
            \'tags': ['test', 'vader', 'kronos'],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
          \{
            \'id': 2,
            \'desc': 'test kronos 2',
            \'tags': [],
            \'due': 0,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 5,
            \'done': 0,
          \}
        \],
      \},
    \],
    \[
      \database_3,
      \{
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5000',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 0,
        \'tasks': [],
      \},
    \],
  \]

Then (should read database):
  for [database, data] in scenarios
    AssertEqual data, kronos#database#read(database)
  endfor

  unlet database_1 database_2 database_3

# -------------------------------------------------------------------- # Write #

Execute (Write):
  let scenarios = [
    \[
      \{},
      \{
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5000',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 0,
        \'tasks': [],
      \},
    \],
    \[
      \{
        \'sync_host': 'localhost:5001',
        \'sync_version': 1,
      \},
      \{
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5001',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 1,
        \'tasks': [],
      \},
    \],
    \[
      \{
        \'tasks': [
          \{
            \'id': 1,
            \'desc': 'desc 1',
            \'tags': [],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
        \],
      \},
      \{
        \'hide_done': 1,
        \'enable_sync': 0,
        \'sync_host': 'localhost:5001',
        \'sync_user_id': '',
        \'sync_device_id': '',
        \'sync_version': 1,
        \'tasks': [
          \{
            \'id': 1,
            \'desc': 'desc 1',
            \'tags': [],
            \'due': 1526397300,
            \'active': 0,
            \'last_active': 0,
            \'worktime': 0,
            \'done': 0,
          \},
        \],
      \},
    \],
  \]

Then (should write database):
  for [data_part, data] in scenarios
    call kronos#database#write(g_database, data_part)
    AssertEqual data, kronos#database#read(g_database)
  endfor
